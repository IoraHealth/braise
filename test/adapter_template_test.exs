defmodule AdapterTemplateTest do
  use ExUnit.Case

  import Braise.AdapterTemplate, only: [generate_from_resource: 1, path_for_type: 1]

  # test "an invalid json schema produces an error" do
  #   json = %{"pirate_town" => "YISSSS"}
  #   {:error, msg } = generate_from_resource(json)

  #   assert msg == "Invalid JSON Schema"
  # end

  test "a valid resource with no custom actions produces a good template" do
    resource = %Braise.Resource{
      url: URI.parse("http://production.icisapp.com/api/v2"),
      name: "patients",
      links: []
    }
    expected_template = """
    // DO NOT EDIT - this file was autogenerated by Braise
    import DS from 'ember-data';
    import Ember from 'ember';

    const { RESTAdapter } = DS;
    const { computed, String: EmberString } = Ember; // eslint-disable-line no-unused-vars

    export default RESTAdapter.extend({
      host: "http://production.icisapp.com",
      namespace: "api/v2",
      token: computed.alias('accessTokenWrapper.token'),

      // Prevent CORS preflight requests for GET requests
      headersForRequest(params) {
        const headers = this._super(params);
        const method = this.methodForRequest(params);

        if (method !== 'GET') {
          headers['Authorization'] = `Bearer ${this.get('token')}`; // eslint-disable-line dot-notation
        }
        return headers;
      },

      dataForRequest(params) {
        const data = this._super(params);
        const method = this.methodForRequest(params);

        if (method === 'GET') {
          data.access_token = data.access_token || this.get('token'); // eslint-disable-line camelcase
        }

        return data;
      }
    });
    """
    {:ok, "patients", template } = generate_from_resource(resource)

    assert template == expected_template
  end

  test "a valid resource with a custom action produces a good template" do
    resource = %Braise.Resource{
      url: URI.parse("http://production.icisapp.com/api/v2"),
      name: "patients",
      links: [%Braise.LinkAction{name: "cancel", method: 'PUT'}]
    }
    expected_template = """
    // DO NOT EDIT - this file was autogenerated by Braise
    import DS from 'ember-data';
    import Ember from 'ember';

    const { RESTAdapter } = DS;
    const { computed, String: EmberString } = Ember; // eslint-disable-line no-unused-vars

    export default RESTAdapter.extend({
      host: "http://production.icisapp.com",
      namespace: "api/v2",
      token: computed.alias('accessTokenWrapper.token'),

      // Prevent CORS preflight requests for GET requests
      headersForRequest(params) {
        const headers = this._super(params);
        const method = this.methodForRequest(params);

        if (method !== 'GET') {
          headers['Authorization'] = `Bearer ${this.get('token')}`; // eslint-disable-line dot-notation
        }
        return headers;
      },

      dataForRequest(params) {
        const data = this._super(params);
        const method = this.methodForRequest(params);

        if (method === 'GET') {
          data.access_token = data.access_token || this.get('token'); // eslint-disable-line camelcase
        }

        return data;
      },

      cancel(modelName, id, snapshot) {
        const url = `${this.buildURL(modelName, id)}/cancel`;
        return this.ajax(url, 'PUT', { data: snapshot });
      }
    });
    """
    {:ok, "patients", template } = generate_from_resource(resource)

    assert template == expected_template
  end

  test "path_for_type does nothing when the resource_name has no underscores" do
    template = path_for_type("patients")

    assert "" == template
  end

  test "path_for_type chucks in the function when the resource name has underscores" do
    expected_template = """
      pathForType(type) {
        const underscorized = EmberString.underscore(type);
        return EmberString.pluralize(underscorized);
      }
    """

    template = path_for_type("staff_members")

    assert expected_template == template
  end

end
