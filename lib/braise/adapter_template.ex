defmodule Braise.AdapterTemplate do

  @moduledoc """
  Constructs a string representation of an Ember-CLI Adapter
  given the passed in JSON Schema Resource.
  """

  # @doc """
  # Returns a tuple that contains a string representation of the adapter
  # ## Examples

  #     iex > resource = %Braise.Resource{definitions: %{"patients" =>{}},
  #                                       links: [%{"href" => "http://bizdev.biz/api/v1"}]}
  #     iex > Braise.AdapterTemplate.generate_from_resource(resource)
  #     {:ok,
  #      "import DS from 'ember-data';\nimport Ember from 'ember';\n
  #      \nexport default DS.RESTAdapter.extend({\n  host: \"http://bizdev.biz\",\n
  #      namespace: \"/api/v1\",\n  token: Ember.computed.alias('accessTokenWrapper.token'),\n  \n\n
  #      headers: function() {\n    return {\n      'AUTHORIZATION': 'Bearer ' + this.get('token');\n
  #      };\n  }.property('token')\n});\n"
  #     }
  # """
  def generate_from_resource(resource) do
    """
    // DO NOT EDIT - this file was autogenerated by Braise
    import DS from 'ember-data';
    import Ember from 'ember';

    const { RESTAdapter } = DS;
    const { computed, String: EmberString } = Ember; // eslint-disable-line no-unused-vars

    export default RESTAdapter.extend({
      host: "#{resource.url.scheme}://#{resource.url.host}",
      namespace: "#{path_without_leading_slash(resource)}",
      token: computed.alias('accessTokenWrapper.token'),

      #{adapter_methods(resource)}
    });
    """
    |> Braise.TemplateFormatter.format!
    |> ok_tuple(resource.name)
  end

  defp path_without_leading_slash(resource) do
    String.slice(resource.url.path, 1..-1)
  end

  defp adapter_methods(resource) do
    [
      path_for_type(resource.name),
      authorization_methods()
    ] ++ custom_actions(resource)
    |> Braise.TemplateFormatter.format_lines
  end

  @doc """
  Returns javascript string for pathForType property if it is the passed in resource_name
  is a snake case representation of multiple words. If it is one word, it replaces
  with nothing.

  ## Examples
    iex > template = "<%= path_for_type %>"
    iex > Braise.AdapterTemplate.path_for_type("patient")
    ""
    iex > Braise.AdapterTemplate.path_for_type("staff_members")
    "pathForType: function(type) {\n  var underscorized = Ember.String.underscore(type);\n  return Ember.String.pluralize(underscorized);\n},\n"
  """
  def path_for_type(resource_name) do
    if String.match?(resource_name, ~r/_/) do
      """
        pathForType(type) {
          const underscorized = EmberString.underscore(type);
          return EmberString.pluralize(underscorized);
        }
      """
    else
      ""
    end
  end

  defp authorization_methods do
    """
      // Prevent CORS preflight requests for GET requests
      headersForRequest(params) {
        const headers = this._super(params);
        const method = this.methodForRequest(params);

        if (method !== 'GET') {
          headers['Authorization'] = `Bearer ${this.get('token')}`; // eslint-disable-line dot-notation
        }
        return headers;
      },

      dataForRequest(params) {
        const data = this._super(params);
        const method = this.methodForRequest(params);

        if (method === 'GET') {
          data.access_token = data.access_token || this.get('token'); // eslint-disable-line camelcase
        }

        return data;
      }
    """
  end

  defp custom_actions(resource) do
    Braise.LinkAction.non_restful_actions(resource.links)
    |> Enum.map(&non_restful_javascript/1)
  end

  defp non_restful_javascript(link_action) do
    action_name = link_action.name
    method = link_action.method
    """
      #{action_name}(modelName, id, snapshot) {
        const url = `${this.buildURL(modelName, id)}/#{action_name}`;
        return this.ajax(url, '#{method}', { data: snapshot });
      }
    """
  end

  defp ok_tuple(body, name) do
    {:ok, name, body}
  end
end
